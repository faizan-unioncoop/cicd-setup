# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
# For a detailed guide to building and testing on iOS, read the docs:
# https://circleci.com/docs/2.0/testing-ios/
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  
  build:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    macos:
      xcode: 14.0.1 # Specify the Xcode version to use

    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run: fastlane scan # Run tests using Fastlane

      # Collect XML test results data to show in the UI, and save the same XML
      # files under test-results folder in the Artifacts tab
      - store_test_results:
          path: test_output
      - store_artifacts:
          path: test_output
          destination: scan-output
  
  ios-release:
    macos:
      xcode: '14.0.1'
    working_directory: ~/your-working-directory

    # use a --login shell so our "set Ruby version" command gets picked up for later steps
    shell: /bin/bash --login -o pipefail

    steps:
      - checkout

      - run:
          name: "Create .env file"
          command: echo -e "APP_STORE_CONNECT_API_KEY_ISSUER_ID=${APP_STORE_CONNECT_API_KEY_ISSUER_ID}\nAPP_STORE_CONNECT_API_KEY_KEY=${APP_STORE_CONNECT_API_KEY_KEY}\nAPP_STORE_CONNECT_API_KEY_KEY_ID=${APP_STORE_CONNECT_API_KEY_KEY_ID}" > .env

      - run:
          command: bundle exec fastlane release_ipa --verbose
          no_output_timeout: 30m
          working_directory: ios

      - store_artifacts:
          path: ios/your_project.ipa


# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  deploy-build: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build
      - request-ipa-and-prepare-release:
          type: approval
          filters:
            <<: *filters-node      
      - ios-release:
          requires:
            - request-ipa-and-prepare-release
          filters:
            <<: *filters-node    
